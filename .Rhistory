PubGreenSpaceDist,
PubGreenSpaceCount) %>%
pivot_longer(cols = Impervious2006:PubGreenSpaceCount) %>%
drop_na()
#Checking Distribution of Each Variable
jgs_GS %>%
ggplot(aes(x = value)) +
geom_density() +
facet_wrap(~name, scales = "free")
#Selecting variables by the rationale above:
jgs_GS <- jgs %>%
select(GEOID10,
Impervious2006,
TreeCanopyFifty2008,
avb50loveg08)
#Standardizing everything sans GEOID:
jgs_GS[2:ncol(jgs_GS)] <- scale(jgs_GS[2:ncol(jgs_GS)])
#Remove NA
jgs_GS <- jgs_GS %>%
drop_na()
#Checking Final Distributions
jgs_GS %>%
pivot_longer(Impervious2006:avb50loveg08) %>%
ggplot(aes(x = value)) +
geom_density() +
facet_wrap(~name, scales = "free")
#Creating Dataset for Mplus to read:
write.table(jgs_GS,
"~/Repo/Green Space Project/Data/GS_set_v2.csv",
col.names = F,
row.names = F)
models <- as.character(2:8)
#for (model in models) {
#  print(model)
#  runModels(sprintf("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_%s.inp", model),
#            showOutput = F)
#}
# create empty model evaluation matrix
model.eval <- matrix(NA, nrow = length(models), ncol = 3)
for (i in 1:length(models)) {
output <- readModels(sprintf("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_%s.out", models[i]))
model.eval[i, ] <- c(ifelse(is.null(output$summaries$AIC),
"NA",
output$summaries$AIC),
ifelse(is.null(output$summaries$AIC),
"NA", output$summaries$BIC), output$summaries$Entropy)
}
colnames(model.eval) <- c("AIC", "BIC", "Entropy")
rownames(model.eval) <- models
plot(x = 2:8, y = model.eval[,1],
type = "b", main = "AIC")
plot(x = 2:8, y = model.eval[,2],
type = "b", main = "BIC")
plot(x = 2:8, y = model.eval[,3],
type = "b", main = "Entropy")
model_out <- readModels("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3.out")
# class probabilities
cprobs <- read.table("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3_probs.txt", sep = "", header = F)
colnames(cprobs) <- model_out$savedata_info$fileVarNames
#Boxplotting Our Variables entered in Latent Class by Latent CLass
cprobs_box <- cprobs %>%
dplyr::select(GEOID, GS, IMPERV:LOWVEG) %>%
pivot_longer(cols = IMPERV:LOWVEG)
cprobs_box %>%
ggplot(aes(x = name, y = value)) +
geom_boxplot() +
facet_wrap(~GS) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
xlab("Class") +
ylab("Value") +
coord_flip()
cprobs_m <- cprobs %>%
select(GEOID,
GS)
jgs <- merge(cprobs_m, jgs, by = "GEOID")
View(jgs)
jgs <- jgs %>%
mutate(GS = case_when(GS == 2 ~ "Sparse",
GS == 3 ~ "Heavy",
GS == 1 ~ "Medium"))
View(jgs)
library(naniar)
library(corrplot)
library(SpatialEpi)
library(leaflet)
library(rgdal)
library(sp)
library(sf)
library(tigris)
naniar::vis_miss(jgs)
naniar::vis_miss(jgs[100:110])
rdgal::
library(naniar)
library(corrplot)
library(SpatialEpi)
library(leaflet)
library(rgdal)
library(sp)
library(sf)
library(tigris)
naniar::vis_miss(jgs)
naniar::vis_miss(jgs[100:110])
jgs_GS_missing <- jgs %>%
select(GEOID10,
Impervious2006,
TreeCanopyFifty2008,
avb50loveg08)
m1 <- naniar::vis_miss(jgs[1:31])
m2 <- naniar::vis_miss(jgs[32:62])
m3 <- naniar::vis_miss(jgs[63:93])
m4 <- naniar::vis_miss(jgs[94:124])
m5 <- naniar::vis_miss(jgs[125:155])
m6 <- naniar::vis_miss(jgs[156:186])
ggarrange(m1,m2,m3, ncol = 1)
ggarrange(m4,m5,m6, ncol = 1)
jgs <- jgs %>% filter(!is.na(GEOID_m))
jgs_plots1 <- jgs %>%
select(-GeoID_num,
-GeoID_num,
-Geography,
-GEOID10,
-GEOID_m,
-GEOID_c,
-GEOID,
-Id,
-SIR_CI_lower,
-SIR_CI_UPPER,
-StErrorSIR
) %>%
pivot_longer(cols = Death:HaveDoc) %>%
drop_na()
#Checking Distribution of Each Variable
jgs_plots1 %>%
ggplot(aes(x = value)) +
geom_density() +
facet_wrap(~name, scales = "free")
jgs_plots_cancer <- jgs %>%
select(Cases,
SIR,
StandarizedSIR,
Death,
SMR,
StandardizedSMR,
StandardizedAgg
) %>%
pivot_longer(cols = Cases:StandardizedAgg) %>%
drop_na()
#Checking Distribution of Each Variable
jgs_plots_cancer %>%
ggplot(aes(x = value)) +
geom_density() +
facet_wrap(~name, scales = "free")
tig <- tracts(state = "42", county = "101") %>%  st_as_sf()
jgs_map <- sp::merge(tig, jgs, by = "GEOID")
l <- leaflet(jgs_map) %>%
addTiles()
pal <- colorNumeric(palette = "YlOrRd", domain = jgs_map$SIR)
labels <- sprintf("<strong>Tract: %s</strong><br/>Cases: %s <br/>Deaths: %s <br/>SIR: %s <br/>SMR: %s <br/> Greenspace Class: %s",
jgs_map$GEOID, jgs_map$Cases, jgs_map$Death, round(jgs_map$SIR, digits = 3), round(jgs_map$SMR, digits = 3), jgs_map$GS) %>%
lapply(htmltools::HTML)
l %>%  addPolygons(color = "grey", weight = 1,
fillColor = ~pal(SIR),
fillOpacity = 0.5,
highlightOptions = highlightOptions(weight = 4),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto"))  %>%
addLegend(pal = pal, values = ~SIR, opacity = 0.5, title = "SIR (2005-2014)", position = "bottomright")
knitr::opts_chunk$set(root.dir = ("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"))
setwd("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/")
mwd <- "C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"
getwd()
library(tidyverse)
library(tigris)
library(leaflet)
library(sp)
library(sf)
jgs <- read_sav("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/Jefferson_GS/GreenSpaceBC_Neighborhood.sav")
# Drop the 11 heavy missing rows
jgs <- jgs %>% filter(!is.na(GEOID_m))
# Read Mplus Output and Give it the variable names I used in Mplus Script
cprobs <- read.table("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3_probs.txt", sep = "", header = F)
colnames(cprobs) <- model_out$savedata_info$fileVarNames
# Merge the above with my main dataset:
cprobs_m <- cprobs %>%  # We only need these two variables.
select(GEOID,
GS)
jgs <- merge(cprobs_m, jgs, by = "GEOID")
jgs <- jgs %>%
mutate(GS = case_when(GS == 2 ~ "Sparse",
GS == 3 ~ "Heavy",
GS == 1 ~ "Medium"))
# Import Tigris Philly map
tig <- tracts(state = "42", county = "101") %>%  st_as_sf()
# Merge the above with the JGS dataset (we do so with the special merge offered by the sp package)
jgs_map <- sp::merge(tig, jgs, by = "GEOID")
l <- leaflet(jgs_map) %>%
addTiles()
pal <- colorNumeric(palette = "YlOrRd", domain = jgs_map$SIR)
labels <- sprintf("<strong>Tract: %s</strong><br/>Cases: %s <br/>Deaths: %s <br/>SIR: %s <br/>SMR: %s <br/> Greenspace Class: %s",
jgs_map$GEOID, jgs_map$Cases, jgs_map$Death, round(jgs_map$SIR, digits = 3), round(jgs_map$SMR, digits = 3), jgs_map$GS) %>%
lapply(htmltools::HTML)
l %>%  addPolygons(color = "grey", weight = 1,
fillColor = ~pal(SIR),
fillOpacity = 0.5,
highlightOptions = highlightOptions(weight = 4),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto"))  %>%
addLegend(pal = pal, values = ~SIR, opacity = 0.5, title = "SIR (2005-2014)", position = "bottomright")
knitr::opts_chunk$set(root.dir = ("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"))
setwd("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/")
mwd <- "C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"
getwd()
library(tidyverse)
library(tigris)
library(leaflet)
library(sp)
library(sf)
jgs <- read_sav("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/Jefferson_GS/GreenSpaceBC_Neighborhood.sav")
# Drop the 11 heavy missing rows
jgs <- jgs %>% filter(!is.na(GEOID_m))
# Read Mplus Output and Give it the variable names I used in Mplus Script
cprobs <- read.table("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3_probs.txt", sep = "", header = F)
colnames(cprobs) <- model_out$savedata_info$fileVarNames
knitr::opts_chunk$set(root.dir = ("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"))
setwd("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/")
mwd <- "C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"
getwd()
library(tidyverse)
library(tigris)
library(leaflet)
library(sp)
library(sf)
jgs <- read_sav("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/Jefferson_GS/GreenSpaceBC_Neighborhood.sav")
# Drop the 11 heavy missing rows
jgs <- jgs %>% filter(!is.na(GEOID_m))
# Read Mplus Output and Give it the variable names I used in Mplus Script
cprobs <- read.table("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3_probs.txt", sep = "", header = F)
colnames(cprobs) <- model_out$savedata_info$fileVarNames
knitr::opts_chunk$set(root.dir = ("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"))
setwd("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/")
mwd <- "C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"
getwd()
library(tidyverse)
library(tigris)
library(leaflet)
library(sp)
library(sf)
jgs <- read_sav("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/Jefferson_GS/GreenSpaceBC_Neighborhood.sav")
# Drop the 11 heavy missing rows
jgs <- jgs %>% filter(!is.na(GEOID_m))
?read_sav
knitr::opts_chunk$set(root.dir = ("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"))
setwd("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/")
mwd <- "C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"
getwd()
library(tidyverse)
library(tigris)
library(leaflet)
library(sp)
library(sf)
library(haven)
jgs <- read_sav("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/Jefferson_GS/GreenSpaceBC_Neighborhood.sav")
# Drop the 11 heavy missing rows
jgs <- jgs %>% filter(!is.na(GEOID_m))
knitr::opts_chunk$set(root.dir = ("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"))
setwd("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/")
mwd <- "C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"
getwd()
library(tidyverse)
library(tigris)
library(leaflet)
library(sp)
library(sf)
library(haven)
jgs <- read_sav("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/Jefferson_GS/GreenSpaceBC_Neighborhood.sav")
# Drop the 11 heavy missing rows
jgs <- jgs %>% filter(!is.na(GEOID_m))
# Read Mplus Output and Give it the variable names I used in Mplus Script
cprobs <- read.table("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3_probs.txt", sep = "", header = F)
colnames(cprobs) <- model_out$savedata_info$fileVarNames
knitr::opts_chunk$set(root.dir = ("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"))
setwd("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/")
mwd <- "C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"
getwd()
library(tidyverse)
library(tigris)
library(leaflet)
library(sp)
library(sf)
library(haven)
library(MplusAutomation)
jgs <- read_sav("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/Jefferson_GS/GreenSpaceBC_Neighborhood.sav")
# Drop the 11 heavy missing rows
jgs <- jgs %>% filter(!is.na(GEOID_m))
# Read Mplus Output and Give it the variable names I used in Mplus Script
cprobs <- read.table("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3_probs.txt", sep = "", header = F)
model_out <- readModels("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3.out")
colnames(cprobs) <- model_out$savedata_info$fileVarNames
# Merge the above with my main dataset:
cprobs_m <- cprobs %>%  # We only need these two variables.
select(GEOID,
GS)
jgs <- merge(cprobs_m, jgs, by = "GEOID")
jgs <- jgs %>%
mutate(GS = case_when(GS == 2 ~ "Sparse",
GS == 3 ~ "Heavy",
GS == 1 ~ "Medium"))
# Import Tigris Philly map
tig <- tracts(state = "42", county = "101") %>%  st_as_sf()
# Merge the above with the JGS dataset (we do so with the special merge offered by the sp package)
jgs_map <- sp::merge(tig, jgs, by = "GEOID")
l <- leaflet(jgs_map) %>%
addTiles()
pal <- colorNumeric(palette = "YlOrRd", domain = jgs_map$SIR)
labels <- sprintf("<strong>Tract: %s</strong><br/>Cases: %s <br/>Deaths: %s <br/>SIR: %s <br/>SMR: %s <br/> Greenspace Class: %s",
jgs_map$GEOID, jgs_map$Cases, jgs_map$Death, round(jgs_map$SIR, digits = 3), round(jgs_map$SMR, digits = 3), jgs_map$GS) %>%
lapply(htmltools::HTML)
l %>%  addPolygons(color = "grey", weight = 1,
fillColor = ~pal(SIR),
fillOpacity = 0.5,
highlightOptions = highlightOptions(weight = 4),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto"))  %>%
addLegend(pal = pal, values = ~SIR, opacity = 0.5, title = "SIR (2005-2014)", position = "bottomright")
knitr::opts_chunk$set(root.dir = ("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"))
setwd("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/")
mwd <- "C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"
getwd()
library(tidyverse)
library(tigris)
library(leaflet)
library(sp)
library(sf)
library(haven)
library(MplusAutomation)
jgs <- read_sav("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/Jefferson_GS/GreenSpaceBC_Neighborhood.sav")
# Drop the 11 heavy missing rows
jgs <- jgs %>% filter(!is.na(GEOID_m))
# Read Mplus Output and Give it the variable names I used in Mplus Script
cprobs <- read.table("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3_probs.txt", sep = "", header = F)
model_out <- readModels("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3.out")
colnames(cprobs) <- model_out$savedata_info$fileVarNames
# Merge the above with my main dataset:
cprobs_m <- cprobs %>%  # We only need these two variables.
select(GEOID,
GS)
jgs <- merge(cprobs_m, jgs, by = "GEOID")
jgs <- jgs %>%
mutate(GS = case_when(GS == 2 ~ "Sparse",
GS == 3 ~ "Heavy",
GS == 1 ~ "Medium"))
# Import Tigris Philly map
tig <- tracts(state = "42", county = "101") %>%  st_as_sf()
# Merge the above with the JGS dataset (we do so with the special merge offered by the sp package)
jgs_map <- sp::merge(tig, jgs, by = "GEOID")
l <- leaflet(jgs_map) %>%
addTiles()
pal <- colorNumeric(palette = "YlOrRd", domain = jgs_map$SIR)
labels <- sprintf("<strong>Tract: %s</strong><br/>Cases: %s <br/>Deaths: %s <br/>SIR: %s <br/>SMR: %s <br/> Greenspace Class: %s",
jgs_map$GEOID, jgs_map$Cases, jgs_map$Death, round(jgs_map$SIR, digits = 3), round(jgs_map$SMR, digits = 3), jgs_map$GS) %>%
lapply(htmltools::HTML)
l %>%  addPolygons(color = "grey", weight = 1,
fillColor = ~pal(SIR),
fillOpacity = 0.5,
highlightOptions = highlightOptions(weight = 4),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px", direction = "auto"))  %>%
addLegend(pal = pal, values = ~SIR, opacity = 0.5, title = "SIR (2005-2014)", position = "bottomright")
View(jgs)
plot(jgs_map["SIR"])
plot(jgs_map["SIR"],
main = "Standardized Incident Rate By Census Tract")
par(mfrow = c(1,2))
plot(jgs_map["SIR"],
main = "Standardized Incident Rate By Census Tract")
plot(jgs_map["SMR"],
main = "Standardized Mortality Rate By Census Tract")
par(mfrow = c(1,2))
plot(jgs_map["SIR"],
main = "Standardized Incident Rate By Census Tract")
plot(jgs_map["SMR"],
main = "Standardized Mortality Rate By Census Tract")
par(mfrow = c(1,2))
plot(jgs_map["SIR"],
main = "Standardized Incident Rate By Census Tract")
plot(jgs_map["SMR"],
main = "Standardized Mortality Rate By Census Tract")
par(mfrow = c(1,2))
plot(jgs_map["GS"],
main = "Greenspace Latent Class By Census Tract")
plot(jgs_map["GS"],
main = "Greenspace Latent Class By Census Tract")
plot(jgs_map["GS"],
main = "Greenspace Latent Class By Census Tract")
ggplot(jgs_map) +
geom_sf(aes(fill=GS)) +
scale_fill_brewer(palette = "Greens")
ggplot(jgs_map) +
geom_sf(aes(fill=GS)) +
scale_fill_brewer(palette = "Greens", direction = -1)
ggplot(jgs_map) +
geom_sf(aes(fill=SIR)) +
scale_fill_brewer(palette = "OrRd", direction = 1) +
labs(title = "SIR by Census Tract")
ggplot(jgs_map) +
geom_sf(aes(fill=SIR)) +
scale_fill_continous(palette = "OrRd", direction = 1) +
labs(title = "SIR by Census Tract")
ggplot(jgs_map) +
geom_sf(aes(fill=SIR)) +
scale_fill_brewer(palette = "OrRd", direction = 1) +
labs(title = "SIR by Census Tract")
ggplot(jgs_map) +
geom_sf(aes(fill=SIR)) +
labs(title = "SIR by Census Tract")
ggplot(jgs_map) +
geom_sf(aes(fill=SIR, col = red)) +
labs(title = "SIR by Census Tract")
ggplot(jgs_map) +
geom_sf(aes(fill=SIR, col = "red")) +
labs(title = "SIR by Census Tract")
ggplot(jgs_map) +
geom_sf(aes(fill=SIR, fill = "red")) +
labs(title = "SIR by Census Tract")
ggplot(jgs_map) +
geom_sf(aes(fill=GS)) +
scale_fill_brewer(palette = "Greens", direction = -1) +
labs(title = "Greenspace Latent Classes by Census Tract")
# Read Mplus Output and Give it the variable names I used in Mplus Script
cprobs <- read.table("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3_probs.txt", sep = "", header = F)
model_out <- readModels("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3.out")
colnames(cprobs) <- model_out$savedata_info$fileVarNames
# Merge the above with my main dataset:
cprobs_m <- cprobs %>%  # We only need these two variables.
select(GEOID,
GS)
jgs <- merge(cprobs_m, jgs, by = "GEOID")
# Replace Class Elements with more informative labels of the same classes.
jgs <- jgs %>%
mutate(GS = case_when(GS == 2 ~ "Sparse",
GS == 3 ~ "Heavy",
GS == 1 ~ "Medium"))
# Read Mplus Output and Give it the variable names I used in Mplus Script
cprobs <- read.table("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3_probs.txt", sep = "", header = F)
model_out <- readModels("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3.out")
colnames(cprobs) <- model_out$savedata_info$fileVarNames
# Merge the above with my main dataset:
cprobs_m <- cprobs %>%  # We only need these two variables.
select(GEOID,
GS)
jgs <- merge(cprobs_m, jgs, by = "GEOID")
# Replace Class Elements with more informative labels of the same classes.
#jgs <- jgs %>%
#  mutate(GS = case_when(GS == 2 ~ "Sparse",
#                        GS == 3 ~ "Heavy",
#                        GS == 1 ~ "Medium"))
# Import Tigris Philly map
tig <- tracts(state = "42", county = "101", year = 2014) %>%  st_as_sf()
# Merge the above with the JGS dataset (we do so with the special merge offered by the sp package)
jgs_map <- sp::merge(tig, jgs, by = "GEOID")
plot(jgs_map["SIR"],
main = "Standardized Incident Rate By Census Tract")
plot(jgs_map["SMR"],
main = "Standardized Mortality Rate By Census Tract")
ggplot(jgs_map) +
geom_sf(aes(fill=GS)) +
scale_fill_brewer(palette = "Greens", direction = -1) +
labs(title = "Greenspace Latent Classes by Census Tract")
knitr::opts_chunk$set(root.dir = ("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"))
setwd("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/")
mwd <- "C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/"
getwd()
library(tidyverse)
library(tigris)
library(leaflet)
library(sp)
library(sf)
library(haven)
library(MplusAutomation)
jgs <- read_sav("C:/Users/hadsa/OneDrive/Documents/Repo/Green Space Project/Data/Jefferson_GS/GreenSpaceBC_Neighborhood.sav")
# Drop the 11 heavy missing rows
jgs <- jgs %>% filter(!is.na(GEOID_m))
# Read Mplus Output and Give it the variable names I used in Mplus Script
cprobs <- read.table("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3_probs.txt", sep = "", header = F)
model_out <- readModels("~/Repo/Green Space Project/MPlus Scripts/GS_v2/gs_3.out")
colnames(cprobs) <- model_out$savedata_info$fileVarNames
# Merge the above with my main dataset:
cprobs_m <- cprobs %>%  # We only need these two variables.
select(GEOID,
GS)
jgs <- merge(cprobs_m, jgs, by = "GEOID")
# Replace Class Elements with more informative labels of the same classes.
jgs <- jgs %>%
mutate(GS = case_when(GS == 2 ~ "Sparse",
GS == 3 ~ "Heavy",
GS == 1 ~ "Medium"))
# Import Tigris Philly map
tig <- tracts(state = "42", county = "101", year = 2014) %>%  st_as_sf()
# Merge the above with the JGS dataset (we do so with the special merge offered by the sp package)
jgs_map <- sp::merge(tig, jgs, by = "GEOID")
plot(jgs_map["SIR"],
main = "Standardized Incident Rate By Census Tract")
plot(jgs_map["SMR"],
main = "Standardized Mortality Rate By Census Tract")
ggplot(jgs_map) +
geom_sf(aes(fill=GS)) +
scale_fill_brewer(palette = "Greens", direction = -1) +
labs(title = "Greenspace Latent Classes by Census Tract")
